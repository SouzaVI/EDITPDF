# -*- coding: utf-8 -*-
"""
/***************************************************************************
 EdicaoAnalise
                                 A QGIS plugin
 Edição de PDF e análise em Excel Padrão Terram
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-05-29
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Igor Viana Souza - Terram Soluções Agronômica
        email                : igor.souzavigor@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .editor_analise_dialog import EdicaoAnaliseDialog
import os.path
from qgis.core import *
import os.path
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from qgis.core import QgsProcessing
from qgis.core import QgsProcessingAlgorithm
from qgis.core import QgsProcessingMultiStepFeedback
from qgis.core import QgsProcessingParameterVectorLayer
import processing
import os # This is is needed in the pyqgis console also
from qgis.core import (QgsVectorLayer)
import math
import qgis.core
from PyPDF2 import PdfFileWriter, PdfFileReader, PdfFileMerger
import io
from PyPDF2 import PdfReader, PdfWriter, PdfMerger, PdfFileReader
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib.units import cm
import pandas as pd
import numpy as np
import math
import time
from geopandas import *
from pathlib import Path
from io import BytesIO


class EdicaoAnalise:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'EdicaoAnalise_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Edição de Análise')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('EdicaoAnalise', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/editor_analise/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Editor de Análise'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Edição de Análise'),
                action)
            self.iface.removeToolBarIcon(action)


    def handleCheckboxStateChangeLaudo(self):
        
        if self.dlg.checkBoxSim.isChecked() == True:
        #bloco será executado somente se o QCheckBox estiver marcado
           
            self.dlg.groupBoxParcial.setEnabled(True)
            self.dlg.checkBoxNomeArgila.setEnabled(True)
        else:
            self.dlg.groupBoxParcial.setEnabled(False)
            self.dlg.checkBoxNomeArgila.setEnabled(False)
            
    def handleCheckboxStateChangeAmostra(self):
        
        if self.dlg.checkBoxSimAmostra.isChecked() == True:
        #bloco será executado somente se o QCheckBox estiver marcado
           
            self.dlg.spinBoxAmostra.setEnabled(True)
            self.dlg.checkBoxNomeTalhao.setEnabled(True)
            
        else:
            self.dlg.spinBoxAmostra.setEnabled(False)
            self.dlg.checkBoxNomeTalhao.setEnabled(False)
                        
    def FarmPT(self):
       
        self.selected_layer_farm = self.dlg.Contorno.currentLayer()
        self.selected_layer_Pt = self.dlg.PT.currentLayer()
        
    
    
         

    def carregaExcel(self):
        """layers vetoriais existente no projeto"""
        self.dlg.ModeloExcel.clear()
        lista_layers = [layer for layer in QgsProject.instance().mapLayers().values()]
        lista_layer_vector =[]
        for layer in lista_layers:
            if layer.type() == QgsMapLayer.VectorLayer:
                lista_layer_vector.append(layer.name())
        self.dlg.ModeloExcel.addItems(lista_layer_vector)     

    def abrirExcel(self):
        """Abre janela de dialogo para abrir um layer a ser aplicado"""
        camada_abrir =str(QFileDialog.getOpenFileName(caption="Escolha o arquivo...",filter = "Excel File (*.xlsx)")[0])
        if (camada_abrir !=""):
            item =(camada_abrir, str.split(os.path.basename(camada_abrir),".")[0])
            self.carregaExcel()
            self.dlg.ModeloExcel.addItems(item) 
    
    def carregaPDF(self):
        """layers vetoriais existente no projeto"""
        self.dlg.ModeloPdf.clear()
        lista_layers = [layer for layer in QgsProject.instance().mapLayers().values()]
        lista_layer_vector =[]
        for layer in lista_layers:
            if layer.type() == QgsMapLayer.VectorLayer:
                lista_layer_vector.append(layer.name())
        self.dlg.ModeloPdf.addItems(lista_layer_vector)     

    def abrirPDF(self):
        """Abre janela de dialogo para abrir um layer a ser aplicado"""
        camada_abrir =str(QFileDialog.getOpenFileName(caption="Escolha o arquivo...",filter = "PDF File (*.pdf)")[0])
        if (camada_abrir !=""):
            item =(camada_abrir, str.split(os.path.basename(camada_abrir),".")[0])
            self.carregaExcel()
            self.dlg.ModeloPdf.addItems(item) 
    
    def variaveis(self):
        self.QtdAmostra = self.dlg.spinBoxAmostra.value()
        self.excel = self.dlg.ModeloExcel.currentText()
        if self.dlg.checkBoxNomeArgila.isChecked() == True:
            self.argila = True
        else:
            self.argila = False
        
        if self.dlg.checkBoxNomeTalhao.isChecked() == True:
            self.talhao = True
        else:
            self.talhao = False
            
            
        if self.dlg.checkBoxOrdenarTalhao.isChecked() == True:
            self.OrdenarTalhao = True
        else:
            self.OrdenarTalhao = False  

        if self.dlg.checkBoxSim.isChecked() == False:
            self.Laudo = False
        else:
            self.Laudo = True
    
    
    
    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = EdicaoAnaliseDialog()

        # show the dialog
        self.dlg.show()
        self.carregaExcel()
        self.dlg.buttonExcel.clicked.connect(self.abrirExcel)
        self.dlg.buttonPdf.clicked.connect(self.abrirPDF)
        self.dlg.checkBoxSim.toggled.connect(self.handleCheckboxStateChangeLaudo)
        self.dlg.checkBoxSimAmostra.toggled.connect(self.handleCheckboxStateChangeAmostra)
        self.dlg.Exportar.clicked.connect(self.GerarLaudoPdf)
        
        result = self.dlg.exec_()
        self.dlg.Exportar.clicked.disconnect(self.GerarLaudoPdf)
        self.dlg.buttonExcel.clicked.disconnect(self.abrirExcel)
        self.dlg.buttonPdf.clicked.disconnect(self.abrirPDF)
        
    
    def GerarLaudoPdf(self):
        self.variaveis()
        self.excel = self.dlg.ModeloExcel.currentText()
        self.FarmPT()
        self.selected_layer_farm = self.dlg.Contorno.currentLayer()
        self.selected_layer_Pt = self.dlg.PT.currentLayer()
        self.pdf = self.dlg.ModeloPdf.currentText()
        
        
    
            
        self.QtdAmostra = self.dlg.spinBoxAmostra.value()
       
        
        def __associacao_atributos__(input, join):
            associacao_atributos = processing.run('native:joinattributesbylocation',{
            'DISCARD_NONMATCHING': False,
            'INPUT': input,
            'JOIN': join,
            'JOIN_FIELDS': ['TALHAO'],
            'METHOD': 0,
            'NON_MATCHING': None,
            'OUTPUT': 'TEMPORARY_OUTPUT',
            'PREDICATE': [0,1,4,5],
            'PREFIX': ''
            })

            output_associacao = associacao_atributos['OUTPUT']
            return output_associacao
        output_associacao=__associacao_atributos__(self.selected_layer_Pt, self.selected_layer_farm)
        associado_gdf = gpd.GeoDataFrame.from_features(output_associacao.getFeatures())
       

    # Converta a lista de atributos em um DataFrame
        
        def __organizar_laudo__(excel):
            header_full_exata = ['laboratory', 'origem', 'serviceOrder', 'point', 'profundity',
            'PH-SMP|None', 'PH-CACL2|None', 'PH-H2O|None', 'Ca+Mg|cmolc/dm3', 'Ca|cmolc/dm3',
            'Mg|cmolc/dm3', 'Al|cmolc/dm3', 'H+AL|cmolc/dm3', 'K|cmolc/dm3',
            'K|mg/dm3', 'P(mel)|mg/dm3', 'P(res)|mg/dm3', 'P(rem)|mg/dm3', 'M.O.|g/dm3',
            'C.O.|g/dm3', 'T|cmolc/dm3', 't|cmolc/dm3', 'V|%', 'SAT.AL|%',
            'Ca/CTC|%', 'Mg/CTC|%', 'K/CTC|%', 'H+Al/CTC|%', 'Ca/Mg|None',
            'Ca/K|None', 'Mg/K|None', 'Argila|g/dm3', 'Silte|g/dm3', 'Areia|mg/dm3',
            'S|mg/dm3', 'B|mg/dm3', 'Cu|mg/dm3', 'Fe|mg/dm3', 'Mn|mg/dm3',
            'Zn|mg/dm3', 'Na|mg/dm3', 'Lote'] 

            header_full_ibra = ['farmOwner', 'farm', 'date', 'numReport', 'userImport', 'dateImport',
                    'Lote', 'laboratory', 'origem', 'serviceOrder', 'point',
                   'profundity', 'P(RES)|mg/dm3', 'MO|None', 'COT|%', 'PH-CaCl2|None',
                   'PH-SMP|None', 'K|cmolc/dm3', 'Ca|cmolc/dm3', 'Mg|cmolc/dm3',
                   'H+Al|cmolc/dm3', 'Al|cmolc/dm3', 'H|cmolc/dm3', 'CTC|cmolc/dm3',
                   'SomaBases|cmolc/dm3', 'V%|%', 'Sat.Al|%', 'S|mg/dm3', 'B|mg/dm3',
                   'Cu|mg/dm3', 'Fe|mg/dm3', 'Mn|mg/dm3', 'Zn|mg/dm3', 'Na|cmolc/dm3',
                   'K/CTC|%', 'Ca/CTC|%', 'Mg/CTC|%', 'Na/CTC|%', 'Al/CTC|%', 'H/CTC|%',
                   'Ca/K|None', 'Ca/Mg|None', 'Mg/K|None', 'Argila|%', 'N|%'] 
            
            df = pd.read_excel(excel)
            df = df.replace(',', '.',regex=True)
    
            if 'Exata' in df['laboratory'].values:
            
                df = df.reindex(header_full_exata, axis=1)
                df = df.applymap(lambda x: round(x, 2) if isinstance(x, (float, int)) else x)
                df.fillna('ns', inplace=True)
            else:
                df = df.reindex(header_full_ibra, axis=1)
                df = df.applymap(lambda x: round(x, 2) if isinstance(x, (float, int)) else x)
                df.fillna(' -- ', inplace=True)
                
            return  df
        df=__organizar_laudo__(self.excel)
    
        def __LaudoCompleto__(df, path_pt_shp):
            pt = (path_pt_shp)
            pt.crs = "EPSG:4326"
            pt_df = pt.set_geometry('geometry')
            pt_df.rename(columns={'ID': 'point'}, inplace=True)
            join_df = pd.merge(pt_df, df, how="inner", on=["point"])
            join_df.rename(columns={'TALHAO': 'Talhao'}, inplace=True)
            #join_df = join_df.drop('TALHAO_2', axis=1)
            
            if self.OrdenarTalhao == False:
                join_df = join_df.sort_values(['profundity', 'point'])
            else:
                join_df = join_df.sort_values(['profundity', 'Talhao'])
            
            join_df_str = join_df.astype(str)
            
            # Check for duplicate values in 'point' column for specific profundity values
            check_df = join_df[join_df['profundity'].isin(['0 A 10 CM', '0 A 20 CM'])]
            if check_df['point'].duplicated().any():
                raise ValueError("Error: Duplicate values found in 'point' column for '0 A 10 CM' or '0 A 20 CM' profundity.")
            
            return join_df_str, join_df
        
        join_df_str, join_df=__LaudoCompleto__(df, associado_gdf)
       
        
            
        def LaudoParcial(join_df, value =self.QtdAmostra, argila=False, talhao=True):
       
                
            if 'Exata' in df['laboratory'].values:
                filtrado = join_df[join_df['profundity'].isin(['0 A 10 CM', '0 A 20 CM'])]

                if argila:
                    filtrado = filtrado[filtrado['Argila|g/dm3'] != 'ns']

                filtrado['V|%'] = pd.to_numeric(filtrado['V|%'])

                if value > len(filtrado):
                    raise ValueError("A quantidade de valores solicitada é maior que a quantidade de linhas do DataFrame.")

                menores_valores = filtrado.groupby('profundity').apply(lambda x: x.nsmallest(value, 'V|%')).reset_index(drop=True)

                resultado = join_df[join_df['point'].isin(menores_valores['point'])]

                if not talhao:
                    resultado['Talhao'] = 'ns'

                if self.OrdenarTalhao == False:
                    resultado_df = resultado.sort_values(['profundity', 'point'])
                else:
                    resultado_df = resultado.sort_values(['profundity', 'Talhao'])
                
                resultado_str = resultado_df.astype(str)
            else:
                filtrado = join_df[join_df['profundity'].isin(['0 A 10 CM', '0 A 20 CM'])]

                if argila:
                    filtrado = filtrado[filtrado['Argila|%'] != ' -- ']

                filtrado['V%|%'] = pd.to_numeric(filtrado['V%|%'])

                if value > len(filtrado):
                    raise ValueError("A quantidade de valores solicitada é maior que a quantidade de linhas do DataFrame.")

                menores_valores = filtrado.groupby('profundity').apply(lambda x: x.nsmallest(value, 'V%|%')).reset_index(drop=True)

                resultado = join_df[join_df['point'].isin(menores_valores['point'])]

                if talhao == False:
                    resultado['Talhao'] = ' -- '
                
                if self.OrdenarTalhao == False:
                    resultado_df = resultado.sort_values(['profundity', 'point'])
                else:
                    resultado_df = resultado.sort_values(['profundity', 'Talhao'])
                
                resultado_str = resultado_df.astype(str)
            
            return resultado_df, resultado_str

        resultado_df, resultado_str =LaudoParcial(join_df, value = self.QtdAmostra, argila=self.argila, talhao=self.talhao)
          
        
        pasta_download = str(Path.home() / "Downloads")

        # Caminho completo do arquivo Excel
        caminho_arquivo = pasta_download + "/Laudo.xlsx"
        
        def ExportarExcel(df):
            output_file = caminho_arquivo
        # Crie um objeto ExcelWriter
            writer = pd.ExcelWriter(output_file, engine='xlsxwriter')
        # Salve o DataFrame no arquivo do Excel
            df.to_excel(writer, index=False)
        # Feche o objeto ExcelWriter
            writer.close()
            
            
        
        def IBRA(df):
            row_count = df.shape[0]
            qtd_pg = row_count / 8

            if isinstance(qtd_pg, int):
                qtd_page = qtd_pg
                pag_list = list(range(0, qtd_page))
            else:
                qtd_page = math.trunc(qtd_pg)
                pag_list = list(range(0, qtd_page + 1))


            for pag in range(len(pag_list)):
                name_files = "ibra"+ str(pag)+  ".pdf"
                file_save ="C:/geoprocessamento/assets/" + name_files 


                def chunks(lista, n):
                    for i in range(0, len(lista), n):
                        yield lista[i:i + n]    

                # Supondo que você já tenha um DataFrame chamado "df"
                colunas = df.columns

                # Verificar se existem colunas no DataFrame
                if "Talhao" not in colunas:
                    raise ValueError(f"O DataFrame não possui a coluna 'Talhão'. Colunas presentes: {', '.join(colunas)}")

               
                
                lab = [x for x in df['serviceOrder']]
                id = [x for x in df['point']]
                lote = [x for x in df['Lote']]
                talhao = [x for x in df['Talhao']]
                prof = [x for x in df['profundity']]

                

                lab_list = list(chunks(lab, 8))
                id_list = list(chunks(id, 8))
                lote_list = list(chunks(lote, 8))
                talhao_list = list(chunks(talhao, 8))
                prof_list = list(chunks(prof, 8))



                packet = BytesIO()
                can = canvas.Canvas(packet, pagesize=A4)
                can.setFont("Times-Roman", 8)
                can.translate(0*cm, 29.7*cm)
                can.drawString(18.29*cm,-26.85*cm , 'Página. ' + str(pag+1) + ' de '+str(qtd_page))
                '''
                PRIMEIRO BLOCO
                LAB

                '''

                try:
                    can.drawString(1*cm,-4.7*cm, lab_list[pag][0])
                    can.drawString(1*cm,-5.14*cm, lab_list[pag][1])
                    can.drawString(1*cm,-5.54*cm, lab_list[pag][2])
                    can.drawString(1*cm,-5.95*cm, lab_list[pag][3])
                    can.drawString(1*cm,-6.35*cm, lab_list[pag][4])
                    can.drawString(1*cm,-6.75*cm, lab_list[pag][5])
                    can.drawString(1*cm,-7.15*cm,lab_list[pag][6])
                    can.drawString(1*cm,-7.55*cm,lab_list[pag][7])
                except:
                    pass

                '''
                SEGUNDO BLOCO
                LAB

                '''

                try:
                    can.drawString(2.65*cm,-4.7*cm,id_list[pag][0] +';' + ' Lote: ' + lote_list[pag][0] + ';' + ' Prof.: '+ prof_list[pag][0] + ';' + ' Talhão: ' +  talhao_list[pag][0])
                    can.drawString(2.65*cm,-5.14*cm, id_list[pag][1]+';' + ' Lote: ' + lote_list[pag][1] + ';' + ' Prof.: '+ prof_list[pag][1] + ';' + ' Talhão: ' +  talhao_list[pag][1]) 
                    can.drawString(2.65*cm,-5.54*cm, id_list[pag][2]+';' + ' Lote: ' + lote_list[pag][2] + ';' + ' Prof.: '+ prof_list[pag][2] + ';' + ' Talhão: ' +  talhao_list[pag][2])
                    can.drawString(2.65*cm,-5.95*cm, id_list[pag][3]+';' + ' Lote: ' + lote_list[pag][3] + ';' + ' Prof.: '+ prof_list[pag][3] + ';' + ' Talhão: ' +  talhao_list[pag][3])
                    can.drawString(2.65*cm,-6.35*cm, id_list[pag][4]+';' + ' Lote: ' + lote_list[pag][4] + ';' + ' Prof.: '+ prof_list[pag][4] + ';' + ' Talhão: ' +  talhao_list[pag][4])
                    can.drawString(2.65*cm,-6.75*cm, id_list[pag][5]+';' + ' Lote: ' + lote_list[pag][5] + ';' + ' Prof.: '+ prof_list[pag][5] + ';' + ' Talhão: ' +  talhao_list[pag][5])
                    can.drawString(2.65*cm,-7.15*cm,id_list[pag][6]+';' + ' Lote: ' + lote_list[pag][6] + ';' + ' Prof.: '+ prof_list[pag][6] + ';' + ' Talhão: ' +  talhao_list[pag][6])
                    can.drawString(2.65*cm,-7.55*cm,id_list[pag][7]+';' + ' Lote: ' + lote_list[pag][7] + ';' + ' Prof.: '+ prof_list[pag][7] + ';' + ' Talhão: ' +  talhao_list[pag][7])
                except:
                    pass   

                '''
                TERCEIRO BLOCO
                LAB HORIZONTAL

                '''

                try:
                    can.setFont("Times-Bold", 8)
                    can.setFillColorRGB(255, 255, 255)
                    can.drawString(9.32*cm,-8.7*cm, lab_list[pag][0])
                    can.drawString(10.81*cm,-8.7*cm, lab_list[pag][1])
                    can.drawString(12.27*cm,-8.7*cm, lab_list[pag][2])
                    can.drawString(13.76*cm,-8.7*cm, lab_list[pag][3])
                    can.drawString(15.26*cm,-8.7*cm, lab_list[pag][4])
                    can.drawString(16.75*cm,-8.7*cm, lab_list[pag][5])
                    can.drawString(18.24*cm,-8.7*cm,lab_list[pag][6])
                    can.drawString(19.7*cm,-8.7*cm,lab_list[pag][7])
                except:
                    pass

                '''
                QUARTO BLOCO
                INICIO DAS DETERMINAÇÕES

                '''   
                p = [x for x in df['P(RES)|mg/dm3']]
                mo = [x for x in df['MO|None']]
                cot = [x for x in df['COT|%']]
                ph = [x for x in df['PH-CaCl2|None']]
                smp = [x for x in df['PH-SMP|None']]
                k = [x for x in df['K|cmolc/dm3']]
                ca = [x for x in df['Ca|cmolc/dm3']]
                mg = [x for x in df['Mg|cmolc/dm3']]
                hal = [x for x in df['H+Al|cmolc/dm3']]
                al = [x for x in df['Al|cmolc/dm3']]
                h = [x for x in df['H|cmolc/dm3']]
                ctc = [x for x in df['CTC|cmolc/dm3']]
                sb = [x for x in df['SomaBases|cmolc/dm3']]
                v = [x for x in df['V%|%']]
                m = [x for x in df['Sat.Al|%']]
                s = [x for x in df['S|mg/dm3']]
                b = [x for x in df['B|mg/dm3']]
                cu = [x for x in df['Cu|mg/dm3']]
                fe = [x for x in df['Fe|mg/dm3']]                    
                mn = [x for x in df['Mn|mg/dm3']]
                zn = [x for x in df['Zn|mg/dm3']]
                na = [x for x in df['Na|cmolc/dm3']]                    
                satk = [x for x in df['K/CTC|%']]
                satca = [x for x in df['Ca/CTC|%']]
                satmg = [x for x in df['Mg/CTC|%']]
                satna = [x for x in df['Na/CTC|%']]   
                satal = [x for x in df['Al/CTC|%']]                      
                sath = [x for x in df['H/CTC|%']]  
                cak = [x for x in df['Ca/K|None']]                      
                relcamg = [x for x in df['Ca/Mg|None']]                      
                mgk = [x for x in df['Mg/K|None']]                      
                argila = [x for x in df['Argila|%']]                     
                n = [x for x in df['N|%']]  


                p = list(chunks(p, 8))
                mo = list(chunks(mo, 8))
                cot = list(chunks(cot, 8))
                ph = list(chunks(ph, 8))
                smp = list(chunks(smp, 8))
                k = list(chunks(k, 8))
                ca = list(chunks(ca, 8))
                mg = list(chunks(mg, 8))
                hal = list(chunks(hal, 8))
                al = list(chunks(al, 8))
                h = list(chunks(h, 8))
                ctc = list(chunks(ctc, 8))
                sb = list(chunks(sb, 8))
                v = list(chunks(v, 8))
                m = list(chunks(m, 8))
                s = list(chunks(s, 8))
                b = list(chunks(b, 8))
                cu = list(chunks(cu, 8))
                fe = list(chunks(fe, 8))
                mn = list(chunks(mn, 8))
                zn = list(chunks(zn, 8))
                na = list(chunks(na, 8))
                satk = list(chunks(satk, 8))
                satca = list(chunks(satca, 8))
                satmg = list(chunks(satmg, 8))
                satna = list(chunks(satna, 8))
                satal = list(chunks(satal, 8))
                sath = list(chunks(sath, 8))
                cak = list(chunks(cak, 8))
                relcamg = list(chunks(relcamg, 8))
                mgk = list(chunks(mgk, 8))
                argila = list(chunks(argila, 8))
                n = list(chunks(n, 8))


                can.setFont("Times-Roman", 8)
                can.setFillColorRGB(0, 0, 0)
                try:   
                    #P
                    can.drawString(9.54*cm,-9.25*cm,p[pag][0])
                    can.drawString(10.90*cm,-9.25*cm,p[pag][1])
                    can.drawString(12.50*cm,-9.25*cm,p[pag][2])
                    can.drawString(13.99*cm,-9.25*cm,p[pag][3])
                    can.drawString(15.44*cm,-9.25*cm,p[pag][4])
                    can.drawString(16.99*cm,-9.25*cm,p[pag][5])
                    can.drawString(18.45*cm,-9.25*cm,p[pag][6])
                    can.drawString(19.90*cm,-9.25*cm,p[pag][7])
                except:
                    pass

                try:
                    #MO
                    can.drawString(9.54*cm,-9.70*cm,mo[pag][0])
                    can.drawString(10.90*cm,-9.70*cm,mo[pag][1])
                    can.drawString(12.50*cm,-9.70*cm,mo[pag][2])
                    can.drawString(13.99*cm,-9.70*cm,mo[pag][3])
                    can.drawString(15.44*cm,-9.70*cm,mo[pag][4])
                    can.drawString(16.99*cm,-9.70*cm,mo[pag][5])
                    can.drawString(18.45*cm,-9.70*cm,mo[pag][6])
                    can.drawString(19.90*cm,-9.70*cm,mo[pag][7])
                except:
                    pass

                try:
                    #COT
                    can.drawString(9.54*cm,-10.10*cm,cot[pag][0])
                    can.drawString(10.90*cm,-10.10*cm,cot[pag][1])
                    can.drawString(12.50*cm,-10.10*cm,cot[pag][2])
                    can.drawString(13.99*cm,-10.10*cm,cot[pag][3])
                    can.drawString(15.44*cm,-10.10*cm,cot[pag][4])
                    can.drawString(16.99*cm,-10.10*cm,cot[pag][5])
                    can.drawString(18.45*cm,-10.10*cm,cot[pag][6])
                    can.drawString(19.90*cm,-10.10*cm,cot[pag][7])
                except:
                    pass

                try:
                    #ph
                    can.drawString(9.54*cm,-10.50*cm,ph[pag][0])
                    can.drawString(10.90*cm,-10.50*cm,ph[pag][1])
                    can.drawString(12.50*cm,-10.50*cm,ph[pag][2])
                    can.drawString(13.99*cm,-10.50*cm,ph[pag][3])
                    can.drawString(15.44*cm,-10.50*cm,ph[pag][4])
                    can.drawString(16.99*cm,-10.50*cm,ph[pag][5])
                    can.drawString(18.45*cm,-10.50*cm,ph[pag][6])
                    can.drawString(19.90*cm,-10.50*cm,ph[pag][7])
                except:
                    pass

                try:
                    #smp
                    can.drawString(9.54*cm,-10.90*cm,smp[pag][0])
                    can.drawString(10.90*cm,-10.90*cm,smp[pag][1])
                    can.drawString(12.50*cm,-10.90*cm,smp[pag][2])
                    can.drawString(13.99*cm,-10.90*cm,smp[pag][3])
                    can.drawString(15.44*cm,-10.90*cm,smp[pag][4])
                    can.drawString(16.99*cm,-10.90*cm,smp[pag][5])
                    can.drawString(18.45*cm,-10.90*cm,smp[pag][6])
                    can.drawString(19.90*cm,-10.90*cm,smp[pag][7])
                except:
                    pass

                try:
                     #k
                    can.drawString(9.54*cm,-11.30*cm,k[pag][0])
                    can.drawString(10.90*cm,-11.30*cm,k[pag][1])
                    can.drawString(12.50*cm,-11.30*cm,k[pag][2])
                    can.drawString(13.99*cm,-11.30*cm,k[pag][3])
                    can.drawString(15.44*cm,-11.30*cm,k[pag][4])
                    can.drawString(16.99*cm,-11.30*cm,k[pag][5])
                    can.drawString(18.45*cm,-11.30*cm,k[pag][6])
                    can.drawString(19.90*cm,-11.30*cm,k[pag][7])
                except:
                    pass

                try:
                    #ca
                    can.drawString(9.54*cm,-11.70*cm,ca[pag][0])
                    can.drawString(10.90*cm,-11.70*cm,ca[pag][1])
                    can.drawString(12.50*cm,-11.70*cm,ca[pag][2])
                    can.drawString(13.99*cm,-11.70*cm,ca[pag][3])
                    can.drawString(15.44*cm,-11.70*cm,ca[pag][4])
                    can.drawString(16.99*cm,-11.70*cm,ca[pag][5])
                    can.drawString(18.45*cm,-11.70*cm,ca[pag][6])
                    can.drawString(19.90*cm,-11.70*cm,ca[pag][7])
                except:
                    pass

                try:
                    #mg
                    can.drawString(9.54*cm,-12.10*cm,mg[pag][0])
                    can.drawString(10.90*cm,-12.10*cm,mg[pag][1])
                    can.drawString(12.50*cm,-12.10*cm,mg[pag][2])
                    can.drawString(13.99*cm,-12.10*cm,mg[pag][3])
                    can.drawString(15.44*cm,-12.10*cm,mg[pag][4])
                    can.drawString(16.99*cm,-12.10*cm,mg[pag][5])
                    can.drawString(18.45*cm,-12.10*cm,mg[pag][6])
                    can.drawString(19.90*cm,-12.10*cm,mg[pag][7])
                except:
                    pass

                try:
                    #hal
                    can.drawString(9.54*cm,-12.50*cm,hal[pag][0])
                    can.drawString(10.90*cm,-12.50*cm,hal[pag][1])
                    can.drawString(12.50*cm,-12.50*cm,hal[pag][2])
                    can.drawString(13.99*cm,-12.50*cm,hal[pag][3])
                    can.drawString(15.44*cm,-12.50*cm,hal[pag][4])
                    can.drawString(16.99*cm,-12.50*cm,hal[pag][5])
                    can.drawString(18.45*cm,-12.50*cm,hal[pag][6])
                    can.drawString(19.90*cm,-12.50*cm,hal[pag][7])
                except:
                    pass

                try:
                    #hal
                    can.drawString(9.54*cm,-12.90*cm,al[pag][0])
                    can.drawString(10.90*cm,-12.90*cm,al[pag][1])
                    can.drawString(12.50*cm,-12.90*cm,al[pag][2])
                    can.drawString(13.99*cm,-12.90*cm,al[pag][3])
                    can.drawString(15.44*cm,-12.90*cm,al[pag][4])
                    can.drawString(16.99*cm,-12.90*cm,al[pag][5])
                    can.drawString(18.45*cm,-12.90*cm,al[pag][6])
                    can.drawString(19.90*cm,-12.90*cm,al[pag][7])
                except:
                    pass

                try:
                    #h
                    can.drawString(9.54*cm,-13.30*cm,h[pag][0])
                    can.drawString(10.90*cm,-13.30*cm,h[pag][1])
                    can.drawString(12.50*cm,-13.30*cm,h[pag][2])
                    can.drawString(13.99*cm,-13.30*cm,h[pag][3])
                    can.drawString(15.44*cm,-13.30*cm,h[pag][4])
                    can.drawString(16.99*cm,-13.30*cm,h[pag][5])
                    can.drawString(18.45*cm,-13.30*cm,h[pag][6])
                    can.drawString(19.90*cm,-13.30*cm,h[pag][7])
                except:
                    pass

                try:
                    #ctc
                    can.drawString(9.54*cm,-13.70*cm,ctc[pag][0])
                    can.drawString(10.90*cm,-13.70*cm,ctc[pag][1])
                    can.drawString(12.50*cm,-13.70*cm,ctc[pag][2])
                    can.drawString(13.99*cm,-13.70*cm,ctc[pag][3])
                    can.drawString(15.44*cm,-13.70*cm,ctc[pag][4])
                    can.drawString(16.99*cm,-13.70*cm,ctc[pag][5])
                    can.drawString(18.45*cm,-13.70*cm,ctc[pag][6])
                    can.drawString(19.90*cm,-13.70*cm,ctc[pag][7])
                except:
                    pass

                try:
                    #sb
                    can.drawString(9.54*cm,-14.10*cm,sb[pag][0])
                    can.drawString(10.90*cm,-14.10*cm,sb[pag][1])
                    can.drawString(12.50*cm,-14.10*cm,sb[pag][2])
                    can.drawString(13.99*cm,-14.10*cm,sb[pag][3])
                    can.drawString(15.44*cm,-14.10*cm,sb[pag][4])
                    can.drawString(16.99*cm,-14.10*cm,sb[pag][5])
                    can.drawString(18.45*cm,-14.10*cm,sb[pag][6])
                    can.drawString(19.90*cm,-14.10*cm,sb[pag][7])
                except:
                    pass

                try:
                    #v
                    can.drawString(9.54*cm,-14.55*cm,v[pag][0])
                    can.drawString(10.90*cm,-14.55*cm,v[pag][1])
                    can.drawString(12.50*cm,-14.55*cm,v[pag][2])
                    can.drawString(13.99*cm,-14.55*cm,v[pag][3])
                    can.drawString(15.44*cm,-14.55*cm,v[pag][4])
                    can.drawString(16.99*cm,-14.55*cm,v[pag][5])
                    can.drawString(18.45*cm,-14.55*cm,v[pag][6])
                    can.drawString(19.90*cm,-14.55*cm,v[pag][7])
                except:
                    pass

                try:
                     #m
                    can.drawString(9.54*cm,-14.95*cm,m[pag][0])
                    can.drawString(10.90*cm,-14.95*cm,m[pag][1])
                    can.drawString(12.50*cm,-14.95*cm,m[pag][2])
                    can.drawString(13.99*cm,-14.95*cm,m[pag][3])
                    can.drawString(15.44*cm,-14.95*cm,m[pag][4])
                    can.drawString(16.99*cm,-14.95*cm,m[pag][5])
                    can.drawString(18.45*cm,-14.95*cm,m[pag][6])
                    can.drawString(19.90*cm,-14.95*cm,m[pag][7])
                except:
                    pass

                try:
                    #s
                    can.drawString(9.54*cm,-15.45*cm,s[pag][0])
                    can.drawString(10.90*cm,-15.45*cm,s[pag][1])
                    can.drawString(12.50*cm,-15.45*cm,s[pag][2])
                    can.drawString(13.99*cm,-15.45*cm,s[pag][3])
                    can.drawString(15.44*cm,-15.45*cm,s[pag][4])
                    can.drawString(16.99*cm,-15.45*cm,s[pag][5])
                    can.drawString(18.45*cm,-15.45*cm,s[pag][6])
                    can.drawString(19.90*cm,-15.45*cm,s[pag][7])
                except:
                    pass

                try:
                    #b
                    can.drawString(9.54*cm,-15.85*cm,b[pag][0])
                    can.drawString(10.90*cm,-15.85*cm,b[pag][1])
                    can.drawString(12.50*cm,-15.85*cm,b[pag][2])
                    can.drawString(13.99*cm,-15.85*cm,b[pag][3])
                    can.drawString(15.44*cm,-15.85*cm,b[pag][4])
                    can.drawString(16.99*cm,-15.85*cm,b[pag][5])
                    can.drawString(18.45*cm,-15.85*cm,b[pag][6])
                    can.drawString(19.90*cm,-15.85*cm,b[pag][7])
                except:
                    pass

                try:
                    #cu
                    can.drawString(9.54*cm,-16.25*cm,cu[pag][0])
                    can.drawString(10.90*cm,-16.25*cm,cu[pag][1])
                    can.drawString(12.50*cm,-16.25*cm,cu[pag][2])
                    can.drawString(13.99*cm,-16.25*cm,cu[pag][3])
                    can.drawString(15.44*cm,-16.25*cm,cu[pag][4])
                    can.drawString(16.99*cm,-16.25*cm,cu[pag][5])
                    can.drawString(18.45*cm,-16.25*cm,cu[pag][6])
                    can.drawString(19.90*cm,-16.25*cm,cu[pag][7])
                except:
                    pass

                try:
                    #fe
                    can.drawString(9.54*cm,-16.65*cm,fe[pag][0])
                    can.drawString(10.90*cm,-16.65*cm,fe[pag][1])
                    can.drawString(12.50*cm,-16.65*cm,fe[pag][2])
                    can.drawString(13.99*cm,-16.65*cm,fe[pag][3])
                    can.drawString(15.44*cm,-16.65*cm,fe[pag][4])
                    can.drawString(16.99*cm,-16.65*cm,fe[pag][5])
                    can.drawString(18.45*cm,-16.65*cm,fe[pag][6])
                    can.drawString(19.90*cm,-16.65*cm,fe[pag][7])
                except:
                    pass

                try:
                    #mn
                    can.drawString(9.54*cm,-17.05*cm,mn[pag][0])
                    can.drawString(10.90*cm,-17.05*cm,mn[pag][1])
                    can.drawString(12.50*cm,-17.05*cm,mn[pag][2])
                    can.drawString(13.99*cm,-17.05*cm,mn[pag][3])
                    can.drawString(15.44*cm,-17.05*cm,mn[pag][4])
                    can.drawString(16.99*cm,-17.05*cm,mn[pag][5])
                    can.drawString(18.45*cm,-17.05*cm,mn[pag][6])
                    can.drawString(19.90*cm,-17.05*cm,mn[pag][7])
                except:
                    pass

                try:
                    #zn
                    can.drawString(9.54*cm,-17.45*cm,zn[pag][0])
                    can.drawString(10.90*cm,-17.45*cm,zn[pag][1])
                    can.drawString(12.50*cm,-17.45*cm,zn[pag][2])
                    can.drawString(13.99*cm,-17.45*cm,zn[pag][3])
                    can.drawString(15.44*cm,-17.45*cm,zn[pag][4])
                    can.drawString(16.99*cm,-17.45*cm,zn[pag][5])
                    can.drawString(18.45*cm,-17.45*cm,zn[pag][6])
                    can.drawString(19.90*cm,-17.45*cm,zn[pag][7])
                except:
                    pass

                try:
                    #na
                    can.drawString(9.54*cm,-17.85*cm,na[pag][0])
                    can.drawString(10.90*cm,-17.85*cm,na[pag][1])
                    can.drawString(12.50*cm,-17.85*cm,na[pag][2])
                    can.drawString(13.99*cm,-17.85*cm,na[pag][3])
                    can.drawString(15.44*cm,-17.85*cm,na[pag][4])
                    can.drawString(16.99*cm,-17.85*cm,na[pag][5])
                    can.drawString(18.45*cm,-17.85*cm,na[pag][6])
                    can.drawString(19.90*cm,-17.85*cm,na[pag][7])
                except:
                    pass

                try:
                    #satk
                    can.drawString(9.54*cm,-18.25*cm,satk[pag][0])
                    can.drawString(10.90*cm,-18.25*cm,satk[pag][1])
                    can.drawString(12.50*cm,-18.25*cm,satk[pag][2])
                    can.drawString(13.99*cm,-18.25*cm,satk[pag][3])
                    can.drawString(15.44*cm,-18.25*cm,satk[pag][4])
                    can.drawString(16.99*cm,-18.25*cm,satk[pag][5])
                    can.drawString(18.45*cm,-18.25*cm,satk[pag][6])
                    can.drawString(19.90*cm,-18.25*cm,satk[pag][7])
                except:
                    pass

                try:
                    #satca
                    can.drawString(9.54*cm,-18.7*cm,satca[pag][0])
                    can.drawString(10.90*cm,-18.7*cm,satca[pag][1])
                    can.drawString(12.50*cm,-18.7*cm,satca[pag][2])
                    can.drawString(13.99*cm,-18.7*cm,satca[pag][3])
                    can.drawString(15.44*cm,-18.7*cm,satca[pag][4])
                    can.drawString(16.99*cm,-18.7*cm,satca[pag][5])
                    can.drawString(18.45*cm,-18.7*cm,satca[pag][6])
                    can.drawString(19.90*cm,-18.7*cm,satca[pag][7])
                except:
                    pass

                try:
                    #satmg
                    can.drawString(9.54*cm,-19.1*cm,satmg[pag][0])
                    can.drawString(10.90*cm,-19.1*cm,satmg[pag][1])
                    can.drawString(12.50*cm,-19.1*cm,satmg[pag][2])
                    can.drawString(13.99*cm,-19.1*cm,satmg[pag][3])
                    can.drawString(15.44*cm,-19.1*cm,satmg[pag][4])
                    can.drawString(16.99*cm,-19.1*cm,satmg[pag][5])
                    can.drawString(18.45*cm,-19.1*cm,satmg[pag][6])
                    can.drawString(19.90*cm,-19.1*cm,satmg[pag][7])
                except:
                    pass

                try:
                    #satna
                    can.drawString(9.54*cm,-19.5*cm,satna[pag][0])
                    can.drawString(10.90*cm,-19.5*cm,satna[pag][1])
                    can.drawString(12.50*cm,-19.5*cm,satna[pag][2])
                    can.drawString(14.00*cm,-19.5*cm,satna[pag][3])
                    can.drawString(15.54*cm,-19.5*cm,satna[pag][4])
                    can.drawString(17.00*cm,-19.5*cm,satna[pag][5])
                    can.drawString(18.55*cm,-19.5*cm,satna[pag][6])
                    can.drawString(20.00*cm,-19.5*cm,satna[pag][7])
                except:
                    pass

                try:

                    #satal
                    can.drawString(9.54*cm,-19.9*cm,satal[pag][0])
                    can.drawString(10.90*cm,-19.9*cm,satal[pag][1])
                    can.drawString(12.50*cm,-19.9*cm,satal[pag][2])
                    can.drawString(14.00*cm,-19.9*cm,satal[pag][3])
                    can.drawString(15.54*cm,-19.9*cm,satal[pag][4])
                    can.drawString(17.00*cm,-19.9*cm,satal[pag][5])
                    can.drawString(18.55*cm,-19.9*cm,satal[pag][6])
                    can.drawString(20.00*cm,-19.9*cm,satal[pag][7])
                except:
                    pass

                try:
                    #sath
                    can.drawString(9.54*cm,-20.3*cm,sath[pag][0])
                    can.drawString(10.90*cm,-20.3*cm,sath[pag][1])
                    can.drawString(12.50*cm,-20.3*cm,sath[pag][2])
                    can.drawString(14.00*cm,-20.3*cm,sath[pag][3])
                    can.drawString(15.54*cm,-20.3*cm,sath[pag][4])
                    can.drawString(17.00*cm,-20.3*cm,sath[pag][5])
                    can.drawString(18.55*cm,-20.3*cm,sath[pag][6])
                    can.drawString(20.00*cm,-20.3*cm,sath[pag][7])
                except:
                    pass

                try:
                    #cak
                    can.drawString(9.54*cm,-20.7*cm,cak[pag][0])
                    can.drawString(10.90*cm,-20.7*cm,cak[pag][1])
                    can.drawString(12.50*cm,-20.7*cm,cak[pag][2])
                    can.drawString(14.00*cm,-20.7*cm,cak[pag][3])
                    can.drawString(15.54*cm,-20.7*cm,cak[pag][4])
                    can.drawString(17.00*cm,-20.7*cm,cak[pag][5])
                    can.drawString(18.55*cm,-20.7*cm,cak[pag][6])
                    can.drawString(20.00*cm,-20.7*cm,cak[pag][7])
                except:
                    pass

                try:
                    #relcamg
                    can.drawString(9.54*cm,-21.1*cm,relcamg[pag][0])
                    can.drawString(10.90*cm,-21.1*cm,relcamg[pag][1])
                    can.drawString(12.50*cm,-21.1*cm,relcamg[pag][2])
                    can.drawString(14.00*cm,-21.1*cm,relcamg[pag][3])
                    can.drawString(15.54*cm,-21.1*cm,relcamg[pag][4])
                    can.drawString(17.00*cm,-21.1*cm,relcamg[pag][5])
                    can.drawString(18.55*cm,-21.1*cm,relcamg[pag][6])
                    can.drawString(20.00*cm,-21.1*cm,relcamg[pag][7])
                except:
                    pass

                try:
                    #mgk
                    can.drawString(9.54*cm,-21.5*cm,mgk[pag][0])
                    can.drawString(10.90*cm,-21.5*cm,mgk[pag][1])
                    can.drawString(12.50*cm,-21.5*cm,mgk[pag][2])
                    can.drawString(14.00*cm,-21.5*cm,mgk[pag][3])
                    can.drawString(15.54*cm,-21.5*cm,mgk[pag][4])
                    can.drawString(17.00*cm,-21.5*cm,mgk[pag][5])
                    can.drawString(18.55*cm,-21.5*cm,mgk[pag][6])
                    can.drawString(20.00*cm,-21.5*cm,mgk[pag][7])
                except:
                    pass

                try:
                    #argila
                    can.drawString(9.54*cm,-21.95*cm,argila[pag][0])
                    can.drawString(10.90*cm,-21.95*cm,argila[pag][1])
                    can.drawString(12.50*cm,-21.95*cm,argila[pag][2])
                    can.drawString(14.00*cm,-21.95*cm,argila[pag][3])
                    can.drawString(15.54*cm,-21.95*cm,argila[pag][4])
                    can.drawString(17.00*cm,-21.95*cm,argila[pag][5])
                    can.drawString(18.55*cm,-21.95*cm,argila[pag][6])
                    can.drawString(20.00*cm,-21.95*cm,argila[pag][7])
                except:
                    pass

                try:
                    #n
                    can.drawString(9.34*cm,-22.35*cm,n[pag][0])
                    can.drawString(11.00*cm,-22.35*cm,n[pag][1])
                    can.drawString(12.40*cm,-22.35*cm,n[pag][2])
                    can.drawString(13.80*cm,-22.35*cm,n[pag][3])
                    can.drawString(15.24*cm,-22.35*cm,n[pag][4])
                    can.drawString(16.80*cm,-22.35*cm,n[pag][5])
                    can.drawString(18.35*cm,-22.35*cm,n[pag][6])
                    can.drawString(19.70*cm,-22.35*cm,n[pag][7])

                except:
                    pass  

                can.save()
                #move to the beginning of the StringIO buffer
                packet.seek(0)
                new_pdf = PdfReader(packet)
                # read your existing PDF
                existing_pdf = PdfReader(open(self.pdf, "rb"))
                output = PdfWriter()
                # add the "watermark" (which is the new pdf) on the existing page
                page = existing_pdf.pages[0]
                page.merge_page(new_pdf.pages[0])
                output.add_page(page)
                # finally, write "output" to a real file
                outputStream = open(file_save, "wb")
                output.write(outputStream)
                outputStream.close()

            #Create and instance of PdfFileMerger() class
            merger = PdfMerger()
            #Create a list with file names
            pdf_files = []


            import os 
            files = os.listdir( 'C:/geoprocessamento/assets/' )
            for f in files:
                if 'ibra' in f:
                    pdf_files.append('C:/geoprocessamento/assets/'+f)

            import re

            def atoi(text):
                return int(text) if text.isdigit() else text

            def natural_keys(text):
                '''
                alist.sort(key=natural_keys) sorts in human order
                http://nedbatchelder.com/blog/200712/human_sorting.html
                (See Toothy's implementation in the comments)
                '''
                return [ atoi(c) for c in re.split(r'(\d+)', text) ]

            pdf_files.sort(key=natural_keys)   

            #Iterate over the list of file names
            for pdf_file in pdf_files:

                #Append PDF files
                merger.append(pdf_file)
            #Write out the merged PDF
            merger.write(pasta_download+"/IBRA_SAIDA.pdf")
            merger.close()
            
        def EXATA(df):
            row_count = df.shape[0]
            qtd_pg = row_count / 8

            if isinstance(qtd_pg, int):
                qtd_page = qtd_pg
                pag_list = list(range(0, qtd_page))
            else:
                qtd_page = math.trunc(qtd_pg)
                pag_list = list(range(0, qtd_page + 1))



                for pag in range(len(pag_list)):
                    name_files = "exata"+ str(pag)+  ".pdf"
                    file_save ='C:/geoprocessamento/assets/' + name_files



                    packet = BytesIO()
                    can = canvas.Canvas(packet, pagesize=A4)
                    can.setFont("Times-Roman", 7)
                    can.translate(0*cm, 29.7*cm)
                    can.drawString(18.1*cm,-1*cm , 'Pg. ' + str(pag+1) + 'de'+str(qtd_page+1))
                    def chunks(lista, n):
                        for i in range(0, len(lista), n):
                            yield lista[i:i + n]
                    ## Bloco O.S
                    """
                        BLOCO O.S
                    """
                    lab_list = [x for x in df['serviceOrder']]

                    #lab_str = '\n\n'.join(lab)

                    lab_lists = list(chunks(lab_list, 8))

                    lab_str = []
                    for l in lab_lists:
                        strs = '\n\n'.join(l)
                        lab_str.append(strs)

                    ##

                    lab1_text = can.beginText(0.8*cm, -9.0 * cm)
                    lab2_text = can.beginText(0.8*cm, -14.9 * cm)
                    lab3_text = can.beginText(0.8*cm, -20.6 * cm)

                    for line in lab_str[pag].splitlines(False):
                        lab1_text.textLine(line.rstrip())
                        lab2_text.textLine(line.rstrip())
                        lab3_text.textLine(line.rstrip())

                    can.drawText(lab1_text)
                    can.drawText(lab2_text)
                    can.drawText(lab3_text)

                    ## Bloco ID


                    """
                        BLOCO ID
                    """

                    id_list = [x for x in df['point']]
                    id_lists = list(chunks(id_list, 8))

                    id_str = []
                    for l in id_lists:
                        strs = '\n\n'.join(l)
                        id_str.append(strs)
                    ##

                    id1_text = can.beginText(2.7*cm, -9.0 * cm)
                    id2_text = can.beginText(2.7*cm, -14.9 * cm)
                    id3_text = can.beginText(2.7*cm, -20.6 * cm)

                    for line in id_str[pag].splitlines(False):
                        id1_text.textLine(line.rstrip())
                        id2_text.textLine(line.rstrip())
                        id3_text.textLine(line.rstrip())

                    can.drawText(id1_text)
                    can.drawText(id2_text)
                    can.drawText(id3_text)

                    ## Bloco Profundidade
                    """
                        BLOCO PROFUNDIDADE
                    """

                    prof_list = [x for x in df['profundity']]
                    prof_lists = list(chunks(prof_list, 8))

                    prof_str = []
                    for l in prof_lists:
                        strs = '\n\n'.join(l)
                        prof_str.append(strs)
                    ##
                    prof1_text = can.beginText(4*cm, -9.0 * cm)
                    prof2_text = can.beginText(4*cm, -14.9 * cm)
                    prof3_text = can.beginText(4*cm, -20.6 * cm)

                    for line in prof_str[pag].splitlines(False):
                        prof1_text.textLine(line.rstrip())
                        prof2_text.textLine(line.rstrip())
                        prof3_text.textLine(line.rstrip())

                    can.drawText(prof1_text)
                    can.drawText(prof2_text)
                    can.drawText(prof3_text)

                    ## Bloco lote
                    """
                        BLOCO LOTE
                    """

                    lote_list = [x for x in df['Lote']]
                    lote_lists = list(chunks(lote_list, 8))

                    lote_str = []
                    for l in lote_lists:
                        strs = '\n\n'.join(l)
                        lote_str.append(strs)
                    ##
                    lote1_text = can.beginText(5.4*cm, -9.0 * cm)
                    lote2_text = can.beginText(5.4*cm, -14.9 * cm)
                    lote3_text = can.beginText(5.4*cm, -20.6 * cm)

                    for line in lote_str[pag].splitlines(False):
                        lote1_text.textLine(line.rstrip())
                        lote2_text.textLine(line.rstrip())
                        lote3_text.textLine(line.rstrip())

                    can.drawText(lote1_text)
                    can.drawText(lote2_text)
                    can.drawText(lote3_text)

                    ## Bloco lote
                    """
                        BLOCO TALHAO
                    """

                    talhao_list = [x for x in df['Talhao']]
                    talhao_lists = list(chunks(talhao_list, 8))

                    talhao_str = []
                    for l in talhao_lists:
                        strs = '\n\n'.join(l)
                        talhao_str.append(strs)
                    ##
                    talhao1_text = can.beginText(6.6*cm, -9.0 * cm)
                    talhao2_text = can.beginText(6.6*cm, -14.9 * cm)
                    talhao3_text = can.beginText(6.6*cm, -20.6 * cm)

                    for line in talhao_str[pag].splitlines(False):
                        talhao1_text.textLine(line.rstrip())
                        talhao2_text.textLine(line.rstrip())
                        talhao3_text.textLine(line.rstrip())

                    can.drawText(talhao1_text)
                    can.drawText(talhao2_text)
                    can.drawText(talhao3_text)

                    ## Bloco SMP
                    """
                        BLOCO pH SMP, PRECISA ARRUMAR
                    """

                    ## INICIO DETERMINAÇÕES
                    """
                        INICIO DAS DETERMINAÇÃOS PRIMEIRO BLOCO:
                        SMP, PH H20 ... P(RES) E P(REM)
                    """
                    smp = [x for x in df['PH-SMP|None']]
                    ph = [x for x in df['PH-CACL2|None']]
                    h20 = [x for x in df['PH-H2O|None']]
                    ca_mg = [x for x in df['Ca+Mg|cmolc/dm3']]
                    ca = [x for x in df['Ca|cmolc/dm3']]
                    mg = [x for x in df['Mg|cmolc/dm3']]
                    al = [x for x in df['Al|cmolc/dm3']]
                    hal = [x for x in df['H+AL|cmolc/dm3']]
                    k1 = [x for x in df['K|cmolc/dm3']]
                    k = [x for x in df['K|mg/dm3']]
                    pmel = [x for x in df['P(mel)|mg/dm3']]
                    pres = [x for x in df['P(res)|mg/dm3']]
                    prem = [x for x in df['P(rem)|mg/dm3']]


                    smp = list(chunks(smp, 8))
                    ph = list(chunks(ph, 8))
                    h20 = list(chunks(h20, 8))
                    ca_mg = list(chunks(ca_mg, 8))
                    ca = list(chunks(ca, 8))
                    mg = list(chunks(mg, 8))
                    al = list(chunks(al, 8))
                    hal = list(chunks(hal, 8))
                    k1 = list(chunks(k1, 8))
                    k = list(chunks(k, 8))
                    pmel = list(chunks(pmel, 8))
                    pres = list(chunks(pres, 8))
                    prem = list(chunks(prem, 8))

                    smp_str = []
                    ph_str = []
                    h20_str = []
                    ca_mg_str = []
                    ca_str = []
                    mg_str = []
                    al_str = []
                    hal_str = []
                    k1_str = []
                    k_str = []
                    pmel_str = []
                    pres_str = []
                    prem_str = []


                    for l in smp:
                        strs = '\n\n'.join(l)
                        smp_str.append(strs)


                    for l in ph:
                        strs = '\n\n'.join(l)
                        ph_str.append(strs)

                    for l in h20:
                        strs = '\n\n'.join(l)
                        h20_str.append(strs)

                    for l in ca_mg:
                        strs = '\n\n'.join(l)
                        ca_mg_str.append(strs)

                    for l in ca:
                        strs = '\n\n'.join(l)
                        ca_str.append(strs) 

                    for l in mg:
                        strs = '\n\n'.join(l)
                        mg_str.append(strs)    

                    for l in al:
                        strs = '\n\n'.join(l)
                        al_str.append(strs)    


                    for l in hal:
                        strs = '\n\n'.join(l)
                        hal_str.append(strs)


                    for l in k1:
                        strs = '\n\n'.join(l)
                        k1_str.append(strs)    

                    for l in k:
                        strs = '\n\n'.join(l)
                        k_str.append(strs)    

                    for l in pmel:
                        strs = '\n\n'.join(l)
                        pmel_str.append(strs)    

                    for l in pres:
                        strs = '\n\n'.join(l)
                        pres_str.append(strs)    

                    for l in prem:
                        strs = '\n\n'.join(l)
                        prem_str.append(strs)    


                     ##
                    smp_text = can.beginText(7.8*cm, -9.0 * cm)
                    ph_text = can.beginText(8.8*cm, -9.0 * cm)
                    h20_text = can.beginText(9.9*cm, -9.0 * cm)
                    ca_mg_text = can.beginText(10.8*cm, -9.0 * cm)
                    ca_text = can.beginText(11.9*cm, -9.0 * cm)
                    mg_text = can.beginText(12.9*cm, -9.0 * cm)
                    al_text = can.beginText(13.7*cm, -9.0 * cm)
                    hal_text = can.beginText(14.7*cm, -9.0 * cm)
                    k1_text = can.beginText(15.8*cm, -9.0 * cm)
                    k_text = can.beginText(16.8*cm, -9.0 * cm)
                    pmel_text = can.beginText(17.9*cm, -9.0 * cm)
                    pres_text = can.beginText(18.8*cm, -9.0 * cm)
                    prem_text = can.beginText(19.8*cm, -9.0 * cm)


                    for line in smp_str[pag].splitlines(False):
                        smp_text.textLine(line.rstrip())     

                    for line in ph_str[pag].splitlines(False):
                        ph_text.textLine(line.rstrip())

                    for line in h20_str[pag].splitlines(False):
                        h20_text.textLine(line.rstrip())    

                    for line in ca_mg_str[pag].splitlines(False):
                        ca_mg_text.textLine(line.rstrip())   

                    for line in ca_str[pag].splitlines(False):
                        ca_text.textLine(line.rstrip())           

                    for line in mg_str[pag].splitlines(False):
                        mg_text.textLine(line.rstrip())           

                    for line in al_str[pag].splitlines(False):
                        al_text.textLine(line.rstrip())           

                    for line in hal_str[pag].splitlines(False):
                        hal_text.textLine(line.rstrip())           

                    for line in k1_str[pag].splitlines(False):
                        k1_text.textLine(line.rstrip())           

                    for line in k_str[pag].splitlines(False):
                        k_text.textLine(line.rstrip())           

                    for line in pmel_str[pag].splitlines(False):
                        pmel_text.textLine(line.rstrip())           

                    for line in pres_str[pag].splitlines(False):
                        pres_text.textLine(line.rstrip())           

                    for line in prem_str[pag].splitlines(False):
                        prem_text.textLine(line.rstrip())           


                    can.drawText(smp_text)
                    can.drawText(ph_text)
                    can.drawText(h20_text)
                    can.drawText(ca_mg_text)
                    can.drawText(ca_text)
                    can.drawText(mg_text)
                    can.drawText(al_text)
                    can.drawText(hal_text)
                    can.drawText(k1_text)
                    can.drawText(k_text)
                    can.drawText(pmel_text)
                    can.drawText(pres_text)
                    can.drawText(prem_text)

                    """
                        INICIO DAS DETERMINAÇÃOS SEGUNDO BLOCO:
                        S, B ... SILTE E AREIA
                    """

                    S = [x for x in df['S|mg/dm3']]
                    B = [x for x in df['B|mg/dm3']]
                    Cu = [x for x in df['Cu|mg/dm3']]
                    Fe = [x for x in df['Fe|mg/dm3']]
                    Mn = [x for x in df['Mn|mg/dm3']]
                    Zn = [x for x in df['Zn|mg/dm3']]
                    Na = [x for x in df['Na|mg/dm3']]
                    Argila = [x for x in df['Argila|g/dm3']]
                    Silte = [x for x in df['Silte|g/dm3']]
                    Areia = [x for x in df['Areia|mg/dm3']]


                    S = list(chunks(S, 8))
                    B = list(chunks(B, 8))
                    Cu = list(chunks(Cu, 8))
                    Fe = list(chunks(Fe, 8))
                    Mn = list(chunks(Mn, 8))
                    Zn = list(chunks(Zn, 8))
                    Na = list(chunks(Na, 8))
                    Argila = list(chunks(Argila, 8))
                    Silte = list(chunks(Silte, 8))
                    Areia = list(chunks(Areia, 8))

                    s_str = []
                    b_str = []
                    cu_str = []
                    fe_str = []
                    mn_str = []
                    zn_str = []
                    na_str = []
                    argila_str = []
                    silte_str = []
                    areia_str = []


                    for l in S:
                        strs = '\n\n'.join(l)
                        s_str.append(strs)

                    for l in B:
                        strs = '\n\n'.join(l)
                        b_str.append(strs)

                    for l in Cu:
                        strs = '\n\n'.join(l)
                        cu_str.append(strs)

                    for l in Fe:
                        strs = '\n\n'.join(l)
                        fe_str.append(strs) 

                    for l in Mn:
                        strs = '\n\n'.join(l)
                        mn_str.append(strs)    

                    for l in Zn:
                        strs = '\n\n'.join(l)
                        zn_str.append(strs)    

                    for l in Na:
                        strs = '\n\n'.join(l)
                        na_str.append(strs)     


                    for l in Argila:
                        strs = '\n\n'.join(l)
                        argila_str.append(strs)


                    for l in Silte:
                        strs = '\n\n'.join(l)
                        silte_str.append(strs)    

                    for l in Areia:
                        strs = '\n\n'.join(l)
                        areia_str.append(strs)    




                    s_text = can.beginText(8.0*cm, -14.9 * cm)
                    b_text = can.beginText(9.3*cm, -14.9 * cm)
                    cu_text = can.beginText(10.6*cm, -14.9 * cm)
                    fe_text = can.beginText(11.9*cm, -14.9 * cm)
                    mn_text = can.beginText(13.1*cm, -14.9 * cm)
                    zn_text = can.beginText(14.3*cm, -14.9 * cm)
                    na_text = can.beginText(15.8*cm, -14.9 * cm)
                    argila_text = can.beginText(17.2*cm, -14.9 * cm)
                    silte_text = can.beginText(18.5*cm, -14.9 * cm)
                    areia_text = can.beginText(19.7*cm, -14.9 * cm)


                    for line in s_str[pag].splitlines(False):
                        s_text.textLine(line.rstrip())

                    for line in b_str[pag].splitlines(False):
                        b_text.textLine(line.rstrip())    

                    for line in cu_str[pag].splitlines(False):
                        cu_text.textLine(line.rstrip())   

                    for line in fe_str[pag].splitlines(False):
                        fe_text.textLine(line.rstrip())           

                    for line in mn_str[pag].splitlines(False):
                        mn_text.textLine(line.rstrip())           

                    for line in zn_str[pag].splitlines(False):
                        zn_text.textLine(line.rstrip())           

                    for line in na_str[pag].splitlines(False):
                        na_text.textLine(line.rstrip())           

                    for line in argila_str[pag].splitlines(False):
                        argila_text.textLine(line.rstrip())           

                    for line in silte_str[pag].splitlines(False):
                        silte_text.textLine(line.rstrip())           

                    for line in areia_str[pag].splitlines(False):
                        areia_text.textLine(line.rstrip())     

                    can.drawText(s_text)
                    can.drawText(b_text)
                    can.drawText(cu_text)
                    can.drawText(fe_text)
                    can.drawText(mn_text)
                    can.drawText(zn_text)
                    can.drawText(na_text)  
                    can.drawText(argila_text)
                    can.drawText(silte_text)
                    can.drawText(areia_text)

                    """
                        INICIO DAS DETERMINAÇÃOS TERCEIRO BLOCO:
                        MO, CO ... CA/K E MG/K)
                    """
                    # terceira tabela
                    mo = [x for x in df['M.O.|g/dm3']]
                    co = [x for x in df['C.O.|g/dm3']]
                    t = [x for x in df['t|cmolc/dm3']]
                    ctc = [x for x in df['T|cmolc/dm3']]
                    v = [x for x in df['V|%']]
                    satal = [x for x in df['SAT.AL|%']]
                    satca = [x for x in df['Ca/CTC|%']]
                    satmg = [x for x in df['Mg/CTC|%']]
                    satk = [x for x in df['K/CTC|%']]
                    sathal = [x for x in df['H+Al/CTC|%']]
                    rel_camg = [x for x in df['Ca/Mg|None']]
                    rel_cak = [x for x in df['Ca/K|None']]
                    rel_mgk = [x for x in df['Mg/K|None']]    


                    #terceira tabela
                    mo = list(chunks(mo, 8))
                    co = list(chunks(co, 8))
                    t = list(chunks(t, 8))
                    ctc = list(chunks(ctc, 8))
                    v = list(chunks(v, 8))
                    satal = list(chunks(satal, 8))
                    satca = list(chunks(satca, 8))
                    satmg = list(chunks(satmg, 8))
                    satk = list(chunks(satk, 8))
                    sathal = list(chunks(sathal, 8))
                    rel_camg = list(chunks(rel_camg, 8))
                    rel_cak = list(chunks(rel_cak, 8))
                    rel_mgk = list(chunks(rel_mgk, 8))   

                    mo_str = []
                    co_str = []
                    t_str = []
                    ctc_str = []
                    v_str = []
                    satal_str = []
                    satca_str = []
                    satmg_str = []
                    satk_str = []
                    sathal_str = []
                    relcamg_str = []
                    relcak_str = []
                    relmgk_str = []

                    for l in mo:
                        strs = '\n\n'.join(l)
                        mo_str.append(strs)

                    for l in co:
                        strs = '\n\n'.join(l)
                        co_str.append(strs)

                    for l in t:
                        strs = '\n\n'.join(l)
                        t_str.append(strs)

                    for l in ctc:
                        strs = '\n\n'.join(l)
                        ctc_str.append(strs) 

                    for l in v:
                        strs = '\n\n'.join(l)
                        v_str.append(strs)    

                    for l in satal:
                        strs = '\n\n'.join(l)
                        satal_str.append(strs)    

                    for l in satca:
                        strs = '\n\n'.join(l)
                        satca_str.append(strs)     


                    for l in satmg:
                        strs = '\n\n'.join(l)
                        satmg_str.append(strs)


                    for l in satk:
                        strs = '\n\n'.join(l)
                        satk_str.append(strs)    

                    for l in sathal:
                        strs = '\n\n'.join(l)
                        sathal_str.append(strs)

                    for l in rel_camg:
                        strs = '\n\n'.join(l)
                        relcamg_str.append(strs)     

                    for l in rel_cak:
                        strs = '\n\n'.join(l)
                        relcak_str.append(strs)    

                    for l in rel_mgk:
                        strs = '\n\n'.join(l)
                        relmgk_str.append(strs) 

                    mo_text = can.beginText(7.8*cm, -20.6 * cm)
                    co_text = can.beginText(8.8*cm, -20.6 * cm)
                    t_text = can.beginText(10.9*cm, -20.6 * cm)
                    ctc_text = can.beginText(9.8*cm, -20.6 * cm)
                    v_text = can.beginText(11.9*cm, -20.6 * cm)
                    satal_text = can.beginText(12.9*cm, -20.6 * cm)
                    satca_text = can.beginText(13.75*cm, -20.6 * cm)
                    satmg_text = can.beginText(14.75*cm, -20.6 * cm)
                    satk_text = can.beginText(15.75*cm, -20.6 * cm)
                    sathal_text = can.beginText(16.75*cm, -20.6 * cm)
                    relcamg_text = can.beginText(17.9*cm, -20.6 * cm)
                    relcak_text = can.beginText(18.9*cm, -20.6 * cm)
                    relmgk_text = can.beginText(19.9*cm, -20.6 * cm)


                    for line in mo_str[pag].splitlines(False):
                        mo_text.textLine(line.rstrip())

                    for line in co_str[pag].splitlines(False):
                        co_text.textLine(line.rstrip())    

                    for line in t_str[pag].splitlines(False):
                        t_text .textLine(line.rstrip())   

                    for line in ctc_str[pag].splitlines(False):
                        ctc_text.textLine(line.rstrip())           

                    for line in v_str[pag].splitlines(False):
                        v_text.textLine(line.rstrip())           


                    for line in satal_str[pag].splitlines(False):
                        satal_text.textLine(line.rstrip())           

                    for line in satca_str[pag].splitlines(False):
                        satca_text.textLine(line.rstrip())           

                    for line in satmg_str[pag].splitlines(False):
                        satmg_text.textLine(line.rstrip())           

                    for line in satk_str[pag].splitlines(False):
                        satk_text.textLine(line.rstrip()) 

                    for line in sathal_str[pag].splitlines(False):
                        sathal_text.textLine(line.rstrip())      

                    for line in relcamg_str[pag].splitlines(False):
                        relcamg_text.textLine(line.rstrip())

                    for line in relcak_str[pag].splitlines(False):
                        relcak_text.textLine(line.rstrip())

                    for line in relmgk_str[pag].splitlines(False):
                        relmgk_text.textLine(line.rstrip())


                    can.drawText(mo_text)
                    can.drawText(co_text)
                    can.drawText(t_text)
                    can.drawText(ctc_text)
                    can.drawText(v_text)
                    can.drawText(satal_text)
                    can.drawText(satca_text)  
                    can.drawText(satmg_text)
                    can.drawText(satk_text)
                    can.drawText(sathal_text)
                    can.drawText(relcamg_text)
                    can.drawText(relcak_text)
                    can.drawText(relmgk_text)

                    can.save()
                    #move to the beginning of the StringIO buffer
                    packet.seek(0)
                    new_pdf = PdfReader(packet)
                    # read your existing PDF
                    existing_pdf = PdfReader(open(self.pdf, "rb"))
                    output = PdfWriter()
                    # add the "watermark" (which is the new pdf) on the existing page
                    page = existing_pdf.pages[0]
                    page.merge_page(new_pdf.pages[0])
                    output.add_page(page)
                    # finally, write "output" to a real file
                    outputStream = open(file_save, "wb")
                    output.write(outputStream)
                    outputStream.close()   

            #Create and instance of PdfFileMerger() class
            merger = PdfMerger()
            #Create a list with file names
            pdf_files = []


            import os 
            files = os.listdir( 'C:/geoprocessamento/assets/' )
            for f in files:
                if 'exata' in f:
                    pdf_files.append('C:/geoprocessamento/assets/'+f)

            import re

            def atoi(text):
                return int(text) if text.isdigit() else text

            def natural_keys(text):
                '''
                alist.sort(key=natural_keys) sorts in human order
                http://nedbatchelder.com/blog/200712/human_sorting.html
                (See Toothy's implementation in the comments)
                '''
                return [ atoi(c) for c in re.split(r'(\d+)', text) ]

            pdf_files.sort(key=natural_keys)   

            #Iterate over the list of file names
            for pdf_file in pdf_files:
                #Append PDF files
                merger.append(pdf_file)
            #Write out the merged PDF
            merger.write(pasta_download+"/EXATA_SAIDA.pdf")
            merger.close()    
                        
                    
        def LaudoExcelToPdf(Df):
            if 'Exata' in df['laboratory'].values:
                EXATA(Df)
                ExportarExcel(Df)
            else:
                IBRA(Df)
                ExportarExcel(Df)
        
        def RemoverFile():
            pasta = 'C:/geoprocessamento/assets/'
            arquivo_protegido = 'fundo_exata.pdf'

            for nome_arquivo in os.listdir(pasta):
                caminho_arquivo = os.path.join(pasta, nome_arquivo)
                
                if nome_arquivo != arquivo_protegido:
                    if os.path.isfile(caminho_arquivo):
                        os.remove(caminho_arquivo)
                    elif os.path.isdir(caminho_arquivo):
                        os.rmdir(caminho_arquivo)
                        
        
        if self.talhao == False and self.Laudo == False:
            LaudoExcelToPdf(join_df_str)
            RemoverFile()
        else:
            LaudoExcelToPdf(resultado_str)
            RemoverFile()
